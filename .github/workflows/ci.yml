name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - development
      - staging
  pull_request:
    branches:
      - main
      - development
      - staging

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.11]
        environment: [development, staging, production]

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Set environment variables based on environment
      - name: Set up environment
        run: |
          if [ "${{ matrix.environment }}" = "development" ]; then
            echo "Setting up development environment..."
            export FLASK_ENV=development
          elif [ "${{ matrix.environment }}" = "staging" ]; then
            echo "Setting up staging environment..."
            export FLASK_ENV=staging
          else
            echo "Setting up production environment..."
            export FLASK_ENV=production
          fi

      # Step 5: Run unit tests
      - name: Run unit tests
        run: |
          python -m unittest tests.py

      # Step 6: Deploy to Vercel for each environment
      - name: Deploy to Vercel
        if: matrix.environment == 'development'
        run: |
          npm install -g vercel
          vercel --prod --token ${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Staging
        if: matrix.environment == 'staging'
        run: |
          npm install -g vercel
          vercel --prod --token ${{ secrets.VERCEL_TOKEN }} --env=staging

      - name: Deploy to Production
        if: matrix.environment == 'production'
        run: |
          npm install -g vercel
          vercel --prod --token ${{ secrets.VERCEL_TOKEN }} --env=production
